/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IncidentsRouteImport } from './routes/incidents'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MonitorsIndexRouteImport } from './routes/monitors/index'
import { Route as MonitorsMonitorNameRouteImport } from './routes/monitors/$monitorName'

const IncidentsRoute = IncidentsRouteImport.update({
  id: '/incidents',
  path: '/incidents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MonitorsIndexRoute = MonitorsIndexRouteImport.update({
  id: '/monitors/',
  path: '/monitors/',
  getParentRoute: () => rootRouteImport,
} as any)
const MonitorsMonitorNameRoute = MonitorsMonitorNameRouteImport.update({
  id: '/monitors/$monitorName',
  path: '/monitors/$monitorName',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/incidents': typeof IncidentsRoute
  '/monitors/$monitorName': typeof MonitorsMonitorNameRoute
  '/monitors': typeof MonitorsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/incidents': typeof IncidentsRoute
  '/monitors/$monitorName': typeof MonitorsMonitorNameRoute
  '/monitors': typeof MonitorsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/incidents': typeof IncidentsRoute
  '/monitors/$monitorName': typeof MonitorsMonitorNameRoute
  '/monitors/': typeof MonitorsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/incidents' | '/monitors/$monitorName' | '/monitors'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/incidents' | '/monitors/$monitorName' | '/monitors'
  id: '__root__' | '/' | '/incidents' | '/monitors/$monitorName' | '/monitors/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  IncidentsRoute: typeof IncidentsRoute
  MonitorsMonitorNameRoute: typeof MonitorsMonitorNameRoute
  MonitorsIndexRoute: typeof MonitorsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/incidents': {
      id: '/incidents'
      path: '/incidents'
      fullPath: '/incidents'
      preLoaderRoute: typeof IncidentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/monitors/': {
      id: '/monitors/'
      path: '/monitors'
      fullPath: '/monitors'
      preLoaderRoute: typeof MonitorsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/monitors/$monitorName': {
      id: '/monitors/$monitorName'
      path: '/monitors/$monitorName'
      fullPath: '/monitors/$monitorName'
      preLoaderRoute: typeof MonitorsMonitorNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  IncidentsRoute: IncidentsRoute,
  MonitorsMonitorNameRoute: MonitorsMonitorNameRoute,
  MonitorsIndexRoute: MonitorsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
